name: CI/CD Pipeline
permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  IMAGE_NAME: learn-node-ui
  REGISTRY: ghcr.io

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint HTML
        run: npm run lint:html

      - name: Lint CSS
        run: npm run lint:css

      - name: Lint JavaScript
        run: npm run lint:js

      - name: Check formatting
        run: npm run format -- --check

  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: lint-and-validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:accessibility

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: lint-and-validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium firefox

      - name: Setup Backend API (learn-node)
        run: |
          # Clone and setup the backend API
          git clone https://github.com/dxas90/learn-node.git backend
          cd backend
          npm ci
          # Start the API in background
          nohup npm start > ../backend.log 2>&1 &
          # Wait for API to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3000/ping > /dev/null 2>&1; then
              echo "Backend API is ready!"
              break
            fi
            echo "Waiting for backend API... ($i/30)"
            sleep 2
          done
          curl http://localhost:3000/ping || (cat ../backend.log && exit 1)

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## 🎭 Playwright E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f tests/e2e/results.json ]; then
            # Parse test results
            TOTAL=$(jq '.suites[0].specs | length' tests/e2e/results.json 2>/dev/null || echo "0")
            PASSED=$(jq '[.suites[0].specs[].tests[] | select(.status == "expected")] | length' tests/e2e/results.json 2>/dev/null || echo "0")
            FAILED=$(jq '[.suites[0].specs[].tests[] | select(.status == "unexpected")] | length' tests/e2e/results.json 2>/dev/null || echo "0")

            echo "📊 **Test Statistics:**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Total: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAILED" -eq "0" ]; then
              echo "### ✅ All tests passed! 🎉" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ⚠️ Some tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 [View Full HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/e2e/report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: tests/e2e/results.json
          retention-days: 30

      - name: Comment PR with Test Results
        if: always() && github.event_name == 'pull_request'
        uses: daun/playwright-report-comment@v3
        with:
          report-file: tests/e2e/results.json

      - name: Show Backend Logs on Failure
        if: failure()
        run: |
          echo "=== Backend API Logs ==="
          cat backend.log || echo "No backend logs found"

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-validate, e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 8080:80 -e API_URL=http://localhost:3000 -e ENVIRONMENT=production ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 5
          curl -f http://localhost:8080 || exit 1
          docker logs test-container
          docker stop test-container

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  publish-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
